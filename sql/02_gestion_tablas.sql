/* 
====================================================
Proyecto           : LEARNHUB
Desarrolladores    : Team 07: Karla Magallanes, Luis Sanchez y Lucas Leyva
Fecha              : Aug 18, 2025
Fase 02            : Implementacion de la Estructura (DDL)
====================================================
*/

-- CREACIÓN DE TABLAS MAESTRO Y TRANSACCIONALES

/* 
====================================================
TABLA: STUDENT
Descripción: 
    Almacena la información personal de los estudiantes
    registrados en la plataforma.
====================================================
*/
CREATE TABLE student (
    student_code VARCHAR2(20) PRIMARY KEY,        -- Código único del estudiante
    document_type CHAR(1) NOT NULL,               -- Tipo de documento (D: DNI, C: Carnet, P: Pasaporte)
    document_number VARCHAR2(20) NOT NULL UNIQUE, -- Número de documento único
    name VARCHAR2(100) NOT NULL,                  -- Nombres del estudiante
    last_name VARCHAR2(100) NOT NULL,             -- Apellidos del estudiante
    phone_number CHAR(9),                         -- Teléfono (9 dígitos)
    email VARCHAR2(150) NOT NULL UNIQUE,          -- Correo electrónico único
    password VARCHAR2(250) NOT NULL,              -- Contraseña encriptada
    registration_date TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL, -- Fecha/hora de registro
    -- Restricciones 
    CONSTRAINT chk_student_doc_type CHECK (document_type IN ('D', 'C', 'P')), 
    CONSTRAINT chk_student_doc_number CHECK (REGEXP_LIKE (document_number, '^[0-9]{8,12}$')), -- 8 a 12 dígitos
    CONSTRAINT chk_student_email CHECK (REGEXP_LIKE (email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')),
    CONSTRAINT chk_student_phone CHECK (REGEXP_LIKE (phone_number, '^[0-9]{9}$'))
);

/* 
====================================================
Restricciones de Student:

✓ NOT NULL → Obliga a que ciertos campos no se queden vacíos (ej: nombre, apellido, email, documento).
✓ CHECK → Permite definir condiciones que deben cumplirse para que se pueda insertar o actualizar un registro (ej: tipo de documento, formato de email).
✓ CHECK (REGEXP_LIKE(phone_number, '^[0-9]{9}$')) → Garantiza que el número de teléfono tenga exactamente 9 dígitos numéricos.
✓ CHECK (REGEXP_LIKE(email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')) → Valida que el correo electrónico tenga un formato correcto (usuario@dominio.com).
✓ UNIQUE → Garantiza que los valores de una columna sean únicos en toda la tabla (ej: número de documento, email).
✓ DEFAULT CURRENT_TIMESTAMP en registration_date → Si no se coloca fecha, se guarda la fecha/hora actual automáticamente.

====================================================
*/


/* 
====================================================
TABLA: COURSE
Descripción:
    Contiene los cursos disponibles en la plataforma.
====================================================
*/
CREATE TABLE course (
    course_code VARCHAR2(20) PRIMARY KEY,                  -- Código único del curso
    title VARCHAR2(100) NOT NULL,                          -- Título del curso
    description VARCHAR2(4000),                            -- Descripción detallada del curso
    category VARCHAR2(100),                                -- Categoría del curso (ej: Tecnología, Idiomas, Negocios)
    instructor VARCHAR2(150) NOT NULL,                     -- Nombre del instructor
    creation_date TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL, -- Fecha/hora de creación del curso
    -- Restricciones
    CONSTRAINT chk_course_title CHECK (LENGTH(title) >= 3), -- Mínimo 3 caracteres
    CONSTRAINT chk_course_category CHECK (category IS NOT NULL)
);


/* 
====================================================
Restricciones de Course:

✓ NOT NULL → Obliga a que ciertos campos no se queden vacíos (ej: título, instructor).
✓ DEFAULT CURRENT_TIMESTAMP en creation_date → Registra automáticamente cuándo se creó el curso.

====================================================
*/

/* 
====================================================
TABLA: MODULE
Descripción:
    Define los módulos en que se divide un curso.
====================================================
*/
CREATE TABLE module (
    module_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identificador único del módulo
    course_code VARCHAR2(20) NOT NULL,                             -- Código del curso (se relacionará en fase 03)
    title VARCHAR2(200) NOT NULL,                                  -- Título del módulo
    sequence_number NUMBER NOT NULL,                               -- Número de secuencia dentro del curso
    -- Restricciones 
    CONSTRAINT uq_module UNIQUE (course_code, sequence_number),    -- Evita duplicar módulos en el mismo curso
    CONSTRAINT chk_module_seq CHECK (sequence_number > 0)          -- La secuencia debe ser positiva
);

/* 
====================================================
Restricciones de Module:

✓ CHECK (sequence_number > 0) → Los módulos deben numerarse de manera positiva (ej: 1, 2, 3…).
✓ FOREIGN KEY → Garantiza que un módulo siempre pertenezca a un curso válido.

====================================================
*/

/* 
====================================================
TABLA: ENROLLMENT
Descripción:
    Registra las inscripciones de los estudiantes en los cursos.
====================================================
*/
CREATE TABLE enrollment (
    enrollment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identificador único de la matrícula
    student_code VARCHAR2(20) NOT NULL,                                -- Código del estudiante (se relacionará en fase 03)
    course_code VARCHAR2(20) NOT NULL,                                 -- Código del curso (se relacionará en fase 03)
    enrollment_date TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,           -- Fecha/hora de inscripción
-- Restricciones adicionales
    CONSTRAINT uq_enrollment UNIQUE (student_code, course_code)        -- Un estudiante no puede inscribirse 2 veces en el mismo curso
);

/* 
====================================================
Restricciones de Enrollment:

✓ FOREIGN KEY student_code → Un registro de matrícula solo puede existir si el estudiante está registrado.
✓ FOREIGN KEY course_code → Solo se puede matricular a cursos que existan.
✓ DEFAULT CURRENT_TIMESTAMP en enrollment_date → Fecha automática de matrícula.

====================================================
*/

/* 
====================================================
TABLA: STUDENT_PROGRESS
Descripción:
    Registra el avance de cada estudiante en los módulos
    de los cursos en los que está inscrito.
====================================================
*/
CREATE TABLE student_progress (
    progress_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identificador único del progreso
    enrollment_id    NUMBER NOT NULL,   -- Inscripción (se relacionará en fase 03)
    module_id        NUMBER NOT NULL,   -- Módulo (se relacionará en fase 03)
    completed        CHAR(1) DEFAULT 'N' CHECK (completed IN ('Y','N')), -- Estado de completado (Y: sí, N: no)
    completion_date  TIMESTAMP,         -- Fecha de finalización (si aplica)
-- Restricciones 
    CONSTRAINT uq_progress UNIQUE (enrollment_id, module_id), -- Un mismo módulo no puede repetirse en una inscripción
    CONSTRAINT chk_completion_date CHECK (
        (completed = 'Y' AND completion_date IS NOT NULL) OR
        (completed = 'N' AND completion_date IS NULL)
    )
);

/*
====================================================
Restricciones de Student Progress:

✓ CHECK (completed IN ('Y','N')) → Solo puede indicar "Y" (Yes) o "N" (No) para progreso.

✓ DEFAULT 'N' en completed → Por defecto un módulo no está completado hasta que el estudiante lo finalice.

✓ FOREIGN KEY enrollment_id → El progreso se asocia siempre a una matrícula existente.

✓ FOREIGN KEY module_id → El progreso se relaciona con un módulo válido.
====================================================
*/